{"ast":null,"code":"import _regeneratorRuntime from \"/Users/antkeo/Code/project/blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/antkeo/Code/project/blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _ from 'lodash';\nimport jsonPlaceHolder from '../api/jsonPlaceHolder'; // getState is a function inside redux that gives us access to all the data\n\nexport var fetchPostsAndUsers = function fetchPostsAndUsers() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var userIds;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(fetchPosts());\n\n              case 2:\n                // using lodash map function we will map thru all post and get the unique userId\n                // _.uniq gives us the unique userId\n                userIds = _.uniq(_.map(getState().posts, 'userId'));\n                userIds.forEach(function (id) {\n                  return dispatch(fetchUser(id));\n                }); // function inside lodash tht aloows us to chain add\n\n                _.chain();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; // fetchpost api call\n\nexport var fetchPosts = function fetchPosts() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return jsonPlaceHolder.get('./posts');\n\n              case 2:\n                res = _context2.sent;\n                dispatch({\n                  type: 'FETCH_POST',\n                  payload: res.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //fetch user api call\n\nexport var fetchUser = function fetchUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return jsonPlaceHolder.get(\"/users/\".concat(id));\n\n              case 2:\n                res = _context3.sent;\n                dispatch({\n                  type: 'FETCH_USER',\n                  payload: res.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; //fetch user api call with _.memoize\n// export const fetchUser = (id) => dispatch => _fetchUser(id, dispatch)\n// const _fetchUser = _.memoize(async (id, dispatch) => {\n//  const res = await jsonPlaceHolder.get(`/users/${id}`)\n//dispatch({\n// type: 'FETCH_USER',\n// payload: res.data\n// })\n// })","map":{"version":3,"sources":["/Users/antkeo/Code/project/blog/src/actions/index.js"],"names":["_","jsonPlaceHolder","fetchPostsAndUsers","dispatch","getState","fetchPosts","userIds","uniq","map","posts","forEach","id","fetchUser","chain","get","res","type","payload","data"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,wBAA5B,C,CAEA;;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAChCD,QAAQ,CAACE,UAAU,EAAX,CADwB;;AAAA;AAEtC;AACA;AACMC,gBAAAA,OAJgC,GAItBN,CAAC,CAACO,IAAF,CAAOP,CAAC,CAACQ,GAAF,CAAMJ,QAAQ,GAAGK,KAAjB,EAAwB,QAAxB,CAAP,CAJsB;AAKtCH,gBAAAA,OAAO,CAACI,OAAR,CAAgB,UAAAC,EAAE;AAAA,yBAAIR,QAAQ,CAACS,SAAS,CAACD,EAAD,CAAV,CAAZ;AAAA,iBAAlB,EALsC,CAMxC;;AACEX,gBAAAA,CAAC,CAACa,KAAF;;AAPsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B,C,CAUP;;AACA,OAAO,IAAMR,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACxB,kBAAOF,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBH,eAAe,CAACa,GAAhB,CAAoB,SAApB,CADpB;;AAAA;AACQC,gBAAAA,GADR;AAGEZ,gBAAAA,QAAQ,CAAC;AACPa,kBAAAA,IAAI,EAAE,YADC;AAEPC,kBAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,iBAAD,CAAR;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,C,CAUP;;AACA,OAAO,IAAMN,SAAS,GAAG,SAAZA,SAAY,CAAAD,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,kBAAMR,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACNF,eAAe,CAACa,GAAhB,kBAA8BH,EAA9B,EADM;;AAAA;AAClBI,gBAAAA,GADkB;AAGxBZ,gBAAAA,QAAQ,CAAC;AACPa,kBAAAA,IAAI,EAAE,YADC;AAEPC,kBAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,iBAAD,CAAR;;AAHwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB,C,CASF;AACA;AACG;AACE;AAEE;AACE;AACA;AACF;AACF","sourcesContent":["import _ from 'lodash'\nimport jsonPlaceHolder from '../api/jsonPlaceHolder'\n\n// getState is a function inside redux that gives us access to all the data\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts())\n  // using lodash map function we will map thru all post and get the unique userId\n  // _.uniq gives us the unique userId\n  const userIds = _.uniq(_.map(getState().posts, 'userId'))\n  userIds.forEach(id => dispatch(fetchUser(id)))\n// function inside lodash tht aloows us to chain add\n  _.chain()\n}\n\n// fetchpost api call\nexport const fetchPosts = () =>\n  async (dispatch, getState) => {\n    const res = await jsonPlaceHolder.get('./posts')\n\n    dispatch({\n      type: 'FETCH_POST',\n      payload: res.data\n    })\n  }\n\n//fetch user api call\nexport const fetchUser = id => async dispatch => {\n       const res = await jsonPlaceHolder.get(`/users/${id}`)\n\n       dispatch({\n         type: 'FETCH_USER',\n         payload: res.data\n       })\n     }\n\n     //fetch user api call with _.memoize\n     // export const fetchUser = (id) => dispatch => _fetchUser(id, dispatch)\n        // const _fetchUser = _.memoize(async (id, dispatch) => {\n          //  const res = await jsonPlaceHolder.get(`/users/${id}`)\n\n            //dispatch({\n              // type: 'FETCH_USER',\n              // payload: res.data\n            // })\n          // })\n"]},"metadata":{},"sourceType":"module"}