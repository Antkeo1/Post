{"version":3,"sources":["api/jsonPlaceHolder.js","actions/index.js","Components/UserHeader.js","Components/PostList.js","Components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","getState","res","wrap","_context2","prev","next","jsonPlaceHolder","get","sent","type","payload","data","stop","_x3","_x4","apply","this","arguments","fetchUser","id","_ref3","_callee3","_context3","concat","_x5","UserHeader","user","props","react_default","createElement","className","name","React","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","Components_UserHeader","renderList","_ref","_callee","_context","_","chain","uniq","forEach","value","_x","_x2","App","Components_PostList","combineReducers","length","undefined","action","toConsumableArray","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","Components_App","document","querySelector"],"mappings":"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","file":"static/js/main.a2592edd.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n  baseURL: 'http://jsonplaceholder.typicode.com'\n})\n","import _ from 'lodash'\nimport jsonPlaceHolder from '../api/jsonPlaceHolder'\n\n// getState is a function inside redux that gives us access to all the data\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts())\n// using lodash map function we will map thru all post and get the unique userId\n// .uniq gives us the unique userId\n// chain is a function inside lodash tht aloows us to chain additonal function\n// that we will minpulate\n// .value() tells chain function to run the listed function\n  _.chain(getState().post)\n    .map('userId')\n    .uniq()\n    .forEach(id => dispatch(fetchUser(id)))\n    .value()\n}\n\n// fetchpost api call\nexport const fetchPosts = () =>\n  async (dispatch, getState) => {\n    const res = await jsonPlaceHolder.get('./posts')\n\n    dispatch({\n      type: 'FETCH_POST',\n      payload: res.data\n    })\n  }\n\n//fetch user api call\nexport const fetchUser = id => async dispatch => {\n       const res = await jsonPlaceHolder.get(`/users/${id}`)\n\n       dispatch({\n         type: 'FETCH_USER',\n         payload: res.data\n       })\n     }\n\n     //fetch user api call with _.memoize\n     // export const fetchUser = (id) => dispatch => _fetchUser(id, dispatch)\n        // const _fetchUser = _.memoize(async (id, dispatch) => {\n          //  const res = await jsonPlaceHolder.get(`/users/${id}`)\n\n            //dispatch({\n              // type: 'FETCH_USER',\n              // payload: res.data\n            // })\n          // })\n","import React from 'react'\nimport { connect } from 'react-redux'\nclass UserHeader extends React.Component {\n\n  render() {\n    const { user } = this.props\n\n    if(!user) {\n      return null\n    }\n\n    return <div className='header'>{user.name}</div>\n  }\n}\n\n// ownProps used to reference this.props of Component\nconst mapStateToProps = (state, ownProps) => {\n  return {user: state.users.find((user) => user.id === ownProps.userId)}\n}\n\nexport default connect(mapStateToProps)(UserHeader)\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {fetchPostsAndUsers} from '../actions'\nimport UserHeader from './UserHeader'\n\nclass PostList extends React.Component {\n  // calls action creator in componentDidMount\n  componentDidMount() {\n    this.props.fetchPostsAndUsers()\n  }\n\n  // to show post on website\n  renderList() {\n    return this.props.posts.map(post => {\n      return (\n        <div className='item' key={post.id}>\n          <i className='large middle aligned icon user' />\n          <div className='content'>\n            <div className='description'>\n              <h2>{post.title}</h2>\n              <p>{post.body}</p>\n            </div>\n            <UserHeader userId={post.userId} />\n          </div>\n        </div>\n      )\n    })\n  }\n\n  render() {\n\n    return <div className='ui relaxed divided list'>{this.renderList()}</div>\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.posts\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  {fetchPostsAndUsers}\n)(PostList)\n","import React from 'react'\nimport PostList from './PostList'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className='ui container'>\n        <PostList />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import {combineReducers} from 'redux'\nimport postsReducer from './postsReducer'\nimport usersReducer from './usersReducer'\n\n\nexport default combineReducers({\n  posts: postsReducer,\n  users: usersReducer\n})\n","export default (state = [], action) => {\n  //switch statement\n  switch(action.type) {\n    case 'FETCH_POST':\n      return action.payload\n    default:\n      return state\n  }\n}\n","export default (state = [], action) => {\n  //switch statement\n  switch(action.type) {\n    case 'FETCH_USER':\n      return [...state, action.payload]\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport App from './Components/App.js'\nimport reducers from './reducers'\n\n// connect middleware/thunk to redux store\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n)\n"],"sourceRoot":""}